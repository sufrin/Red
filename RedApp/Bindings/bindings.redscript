#
# Red profile and bindings in RedScript
#

##############################################################################
#
# Persistent features for the profile
#
constant prefer  "Dejavu Sans Mono"

persist  style   "Features" "Font Style"  "plain" (list "plain" "bold")
persist  size    "Features" "Font Size"   18 (list 12 14 16 18 20 24 28)
persist  family  "Features" "Font Family" prefer (list prefer "Monospaced")

tickbox  develop      "Features" "Development"           false
tickbox  monitoring   "Features" "Monitoring"            false
tickbox  mathkeyboard "Features" "Mathematical Keyboard" true
#
#############################################################################

# syntactic sugar for several global constant declarations
(val (monitor . (if monitoring popup (fun x ())))
     (user    . (ENV "USER"))
     (os      . (PROP "os.name"))
     (OSX     . (<=  "Mac" os))
)


monitor  (SOURCE) user os (if OSX "OSX" "Linux") 

#############################################################################
#
#
#       Declare fonts and their roles
#
constant fontA (font (string family "/" style "/" size))
constant fontB (font (string family "/" style "/" (- size 2)))
constant fontC (font (string "Dialog" "/" "bold" "/" (max size 16)))

monitor (SOURCE) (list family style size) fontA fontB fontC

UI:useFont fontA widget default button menu menubutton feedback
UI:useFont fontB menu menubutton feedback
UI:useFont fontC menu menubutton button
#
#
#
#############################################################################


#############################################################################
#
#
#       Declare features of the UI
#
constant shellCommands (list "wc" "ls -lt" "date" "printenv")

(def (UI:pipeShellCommands path) shellCommands)

#
#       Latex menu is to be present for .tex files / what's on the menu
#
(def (UI:needsLatex      path) (endsWith path ".tex"))
(def (UI:latexBlockTypes path) latexblocktypes)


(constant latexblocktypes
  `(    foil     itemize   enumerate       -
        note     exercise  answer          -
        code     "-code"   "code*"  alltt  -
        verbatim comment   smaller         -
        question part      ans
  )
)
#
#
#
#############################################################################

#############################################################################
#
#
#       Report unhandled input
#
(def (UI:unhandledInput key)
     (seq (popup "Unhandled: " (inputToString key))
          (log   "Unhandled: " (inputToString key))
          ()
          ))

constant flipski (andThen (command "flip")
                          (command "paste")
                          (command "flip") )

(UI:keys
      ("NUMPAD-5@Numpad"   . flipski)         
      ("'ยง'"               . (command "flip"))
      #("SLASH(C)"          . (insert  "/flip/"))
      ("'/'(A)"            . (insert  "/flip/"))
      ("'/'(AS)"            . (insert  "/flop/"))
      )
      
(def (handleInput    key) (log "Key:" key)())
#
#
#############################################################################

#############################################################################
#
#
#       Experimental scripts for the foot of the "Pipe" menu 
#
def  (EvalArg  path arg find repl sel)(readEval arg false)
def  (Fail path arg find repl sel) (fail)
def  (Eval path arg find repl sel) (readEval sel false)

(def (UI:pipeRedScripts path) (list `EvalArg `Eval `Fail))

(def (UI:needsPandoc path) (endsWith path ".md"))

#
#
#
#############################################################################

#############################################################################
#
#
#       Abbreviations
#
include "symbols.redscript" true
#
#
#
#############################################################################