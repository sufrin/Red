#
#          A monolithic executable Makefile that recompiles (see
#          SCALAC) all discoverable sources if ANY were edited later
#          than the target.  
#

SOURCE := $(wildcard src/*/*/*.scala src/*/*.scala src/*.scala)

# (soft) links to current variants of the three libraries must be in the current directory
LIB    := scala-library.jar
KIT    := regexkit.jar
SWING  := scala-swing.jar

CP     := $(PWD)/$(LIB):$(PWD)/$(SWING):$(PWD)/$(KIT)

DOC             := doc
SCRIPT          := ired
SSCRIPT         := sred
MANIFEST        := APPLEREDMANIFEST.MF

#       Parameters: compiler, flags, documentation program
#
#       SCALAC specifies the scala compiler
#               I no longer trust "fsc" (the incremental Scala compiler), 
#
#       SFLAGS specifies the flags given to the scala compiler
#

SCALAC   := scalac
SFLAGS   := -deprecation -feature
SCALADOC := scaladoc -deprecation -groups -sourcepath src



#       Targets. The default target is "all"

all:        $(JAVOID) $(SCRIPT) $(SSCRIPT) ANNOUNCE

ANNOUNCE:;  @echo "############################ $(SCRIPT): uses the scala runtime and IJ files";\
            echo  "############################ $(SSCRIPT); uses the scala runtime + Red.jar"; \
            echo  "############################ $(JAVOID): is a complete java program - with libraries already loaded"

$(JAR):     $(SOURCE); touch $(JAR); $(SCALAC) $(SFLAGS) -cp $(CP) -d $(JAR) $(SOURCE); touch $@

$(JAVOID):  .classes $(MANIFEST);\
            jar cvf $(JAVOID) -C CLASSES . ;\
            jar uvmf $(MANIFEST) $(JAVOID)

.classes:   $(JAR) $(LIB) $(KIT) $(SWING);\
            mkdir -p CLASSES ; \
            (cd CLASSES ; \
            jar xvf ../$(JAR) ;\
            jar xvf ../$(LIB) ;\
            jar xvf ../$(KIT) ;\
            jar xvf ../$(SWING) ); touch .classes         

$(SSCRIPT): $(JAR) ; \
            echo "# Script synthesised by make" > ./$(SSCRIPT)  ; \
            echo scala -cp $(CP):$(PWD)/$(JAR) $(MAINCLASS) >./$(SSCRIPT) '"'$$\@'"' >> ./$(SSCRIPT); chmod +x $(SSCRIPT)
            
$(SCRIPT):  ; \
            echo "# Script synthesised by make" > ./$(SCRIPT)  ; \
            echo scala -cp $(CP):$(IJCLASSES) $(MAINCLASS) >./$(SCRIPT) '"'$$\@'"' >> ./$(SCRIPT); chmod +x $(SCRIPT)

DEPS:       $(JAR); jdeps -R -verbose:class -apionly -q   $(JAR)  | egrep -v 'anon|java|scala' | sed -e"s/[ ]*.jar//" > DEPS

.PHONY:     clean ANNOUNCE list
clean:      ; cleandir; rm -rf CLASSES .classes $(DOC) $(JAR) 


$(DOC):     $(SOURCE); mkdir -p $(DOC) ; $(SCALADOC) -dependencyfile $@.DEP -cp $(CP) -d $(DOC) $(SOURCE) ; touch $@

LISTING=LISTINGSOURCES.pdf
# Make a printable/maintainable listing 
$(LISTING): $(SOURCE); @ [ -e $(LISTING) ] && \
                              listing $(LISTING) -l +c `find src -name '*.scala' -newer $(LISTING) | sort` || \
                              listing $(LISTING) -l +c `find src -name '*.scala' | sort`


SCRIPTS:= $(wildcard REDAPP/Configuration/*.redscript REDAPP/AppleRed-server REDAPP/Profiles/*.profile)
LISTINGSCRIPTS=LISTINGSCRIPTS.pdf
$(LISTINGSCRIPTS): $(SCRIPTS); listing $(LISTINGSCRIPTS) -l  $(SCRIPTS) `find REDAPP/Shellscripts -type f -not -name 'redfmt'`

scripts: $(LISTINGSCRIPTS)
sources: $(LISTING)

listing: scripts sources

